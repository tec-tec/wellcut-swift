//
//  MessagesViewController.swift
//  MessagesExtension
//
//  Created by Ludovic Ollagnier on 19/01/2017.
//  Copyright Â© 2017 Ludovic Ollagnier. All rights reserved.
//

import UIKit
import Messages

class MessagesViewController: MSMessagesAppViewController {
    
    @IBOutlet weak var tableView: UITableView!
    @IBOutlet var selectedRestoView: SelectedRestoView!
    
    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
    
        // Use this method to prepare for the change in presentation style.
        print("will transition")
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
        print(activeConversation)
        print(activeConversation?.selectedMessage)
    }
    
    override func didSelect(_ message: MSMessage, conversation: MSConversation) {
        guard let url = activeConversation?.selectedMessage?.url, let components = URLComponents(url: url, resolvingAgainstBaseURL: false), let items = components.queryItems, let rest = restaurant(from: items) else { return }

        selectedRestoView.configure(with: rest)
        tableView.tableHeaderView = selectedRestoView
}
    
    @IBAction func showDetailForSelectedResto(_ sender: Any) {
        displayDetails()
    }
    
    private func restaurant(from queryItems: [URLQueryItem]) -> Restaurant? {
        
        var name: String?
        var adress: String?
        var style: Restaurant.Style?
        
        for i in queryItems {
            switch i.name {
            case "name":
                name = i.value
            case "address":
                adress = i.value
            case "style":
                style = Restaurant.Style(rawValue: i.value ?? "")
            default:
                ()
            }
        }
        
        guard let a = adress, let n = name else { return nil }
        return Restaurant(name: a, address: n, style: style, grade: nil, mediumPrice: nil, specificities: [], openingHours: [:], lastVisit: nil)
    }
    
    private func displayDetails() {
        guard let url = activeConversation?.selectedMessage?.url, let components = URLComponents(url: url, resolvingAgainstBaseURL: false), let items = components.queryItems else { return }
        
        guard let rest = restaurant(from: items) else { return }
        
        guard let vc = storyboard?.instantiateViewController(withIdentifier: "MessageDetailViewController") as? MessageDetailViewController else { return }
        vc.selectedRestaurant = rest
        
        present(vc, animated: true, completion: nil)
    }
    
}

extension MessagesViewController: UITableViewDelegate {
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        
        let selectedResto = Directory.shared.allRestaurants[indexPath.row]
        
        let layout = MSMessageTemplateLayout()
        layout.image = UIImage(named: "resto")
        layout.caption = selectedResto.name
        layout.subcaption = selectedResto.address
        layout.trailingSubcaption = selectedResto.style?.rawValue
        
        let message = MSMessage()
        message.shouldExpire = false
        message.layout = layout
        
        var components = URLComponents()
        let addressItem = URLQueryItem(name: "address", value: selectedResto.address)
        let nameItem = URLQueryItem(name: "name", value: selectedResto.name)
        let styleItem = URLQueryItem(name: "style", value: selectedResto.style?.rawValue)
        components.queryItems = [nameItem, addressItem, styleItem]
        message.url = components.url
        
        requestPresentationStyle(.compact)
        activeConversation?.insert(message, completionHandler: nil)
        tableView.deselectRow(at: indexPath, animated: true)
    }
}

class SelectedRestoView: UIView {
    
    @IBOutlet weak var name: UILabel!
    @IBOutlet weak var address: UILabel!
    
    func configure(with resto: Restaurant) {
        name.text = resto.name
        address.text = resto.address
    }
}
